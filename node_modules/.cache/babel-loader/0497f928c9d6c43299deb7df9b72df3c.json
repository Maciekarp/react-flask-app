{"ast":null,"code":"var _jsxFileName = \"E:\\\\UMBC Stuff\\\\CMSC 447\\\\homework\\\\react-flask-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { List, Header } from \"semantic-ui-react\";\nimport { useTable } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CreateData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      id: '',\n      points: ''\n    }; // This binding is necessary to make `this` work in the callback\n\n    this.handleName = this.handleName.bind(this);\n    this.handleID = this.handleID.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handlePoints = this.handlePoints.bind(this);\n  }\n\n  handleName(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n\n  handleID(event) {\n    this.setState({\n      id: event.target.value\n    });\n  }\n\n  handlePoints(event) {\n    this.setState({\n      points: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    if (this.state.name == '' || this.state.id == '' || this.state.points == '') {\n      alert('The query cannot be empty');\n    } else if (isNaN(this.state.id) || isNaN(this.state.points)) {\n      alert('ID and Points must be integers');\n    } else {\n      var newStudent = {\n        name: this.state.name,\n        id: Number(this.state.id),\n        points: Number(this.state.points)\n      };\n      const response = fetch('/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newStudent)\n      });\n      this.props.onNewStudent(newStudent);\n      this.setState({\n        name: ''\n      });\n      this.setState({\n        id: ''\n      });\n      this.setState({\n        points: ''\n      });\n    }\n\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [\"Create:\", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: this.state.name,\n          onChange: this.handleName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: this.state.id,\n          onChange: this.handleID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Points:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: this.state.points,\n          onChange: this.handlePoints\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction Table(_ref) {\n  _s();\n\n  let {\n    columns,\n    data\n  } = _ref;\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }); // Render the UI for your table\n\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n          children: column.render('Header')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map((row, i) => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 24\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Table, \"I30oMK7YX0QNq2cykcLOZcUVqsc=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\nexport const Students = _ref2 => {\n  _s2();\n\n  let {\n    students\n  } = _ref2;\n  const columns = React.useMemo(() => [{\n    columns: [{\n      Header: 'Name',\n      accessor: 'name'\n    }, {\n      Header: 'ID',\n      accessor: 'id'\n    }, {\n      Header: 'Points',\n      accessor: 'points'\n    }]\n  }, []]);\n  /*\n  return (\n    <List>\n      Name:\n      {students.map(student => {\n        return (\n          <List.Item key = {student.name}>\n            <Header>\n              {student.name}\n              {student.id}\n              {student.points}\n            </Header>\n          </List.Item>\n        \n        )\n      })}\n    </List>\n  );\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: students\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Students, \"erkfbBpUuAY09jdvhSOqc0XsEHQ=\");\n\n_c2 = Students;\n\nfunction GetLines(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"GetLines\",\n    children: /*#__PURE__*/_jsxDEV(Students, {\n      students: props.students\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = GetLines;\n\nfunction UpdateStudent(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n\n_c4 = UpdateStudent;\n\nfunction DeleteStudent(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n\n_c5 = DeleteStudent;\n\nfunction App() {\n  _s3();\n\n  // used to have and array of students\n  const [students, setStudents] = useState([]);\n  useEffect(() => {\n    fetch(\"/data\").then(response => response.json().then(data => {\n      setStudents(data.rows);\n    }));\n  }, []); // console.log(students);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table\",\n    children: [/*#__PURE__*/_jsxDEV(CreateData, {\n      onNewStudent: student => setStudents(currentStudents => [...currentStudents, student])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GetLines, {\n      students: students\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UpdateStudent, {\n      students: students\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeleteStudent, {\n      students: students\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(App, \"Xxsbsc/n21pueGlfwfykfeIEF1E=\");\n\n_c6 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Table\");\n$RefreshReg$(_c2, \"Students\");\n$RefreshReg$(_c3, \"GetLines\");\n$RefreshReg$(_c4, \"UpdateStudent\");\n$RefreshReg$(_c5, \"DeleteStudent\");\n$RefreshReg$(_c6, \"App\");","map":{"version":3,"sources":["E:/UMBC Stuff/CMSC 447/homework/react-flask-app/src/App.js"],"names":["React","useState","useEffect","logo","List","Header","useTable","CreateData","Component","constructor","props","state","name","id","points","handleName","bind","handleID","handleSubmit","handlePoints","event","setState","target","value","alert","isNaN","newStudent","Number","response","fetch","method","headers","body","JSON","stringify","onNewStudent","preventDefault","render","Table","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","column","getHeaderProps","row","i","getRowProps","cells","cell","getCellProps","Students","students","useMemo","accessor","GetLines","UpdateStudent","DeleteStudent","App","setStudents","then","json","student","currentStudents"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { List, Header } from \"semantic-ui-react\";\nimport { useTable } from 'react-table';\n\nclass CreateData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name: '', id: '', points: ''};\n    // This binding is necessary to make `this` work in the callback\n    this.handleName = this.handleName.bind(this);\n    this.handleID = this.handleID.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handlePoints = this.handlePoints.bind(this);\n\n  }\n\n  handleName(event) {\n    this.setState({name: event.target.value});\n  }\n\n  handleID(event) {\n    this.setState({id: event.target.value});\n  }\n  \n  handlePoints(event) {\n    this.setState({points: event.target.value});\n  }\n\n\n  handleSubmit(event) {\n    if (this.state.name == '' || this.state.id == '' || this.state.points == ''){\n      alert('The query cannot be empty')\n    } else if (isNaN(this.state.id) || isNaN(this.state.points)) {\n      alert('ID and Points must be integers')\n    } else {\n      var newStudent = {\n        name: this.state.name,\n        id: Number(this.state.id),\n        points: Number(this.state.points)\n      }\n      const response = fetch('/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newStudent)\n      });\n      \n      this.props.onNewStudent(newStudent)\n\n      this.setState({name: ''});\n      this.setState({id: ''});\n      this.setState({points: ''});\n    }\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        Create:\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.name} onChange={this.handleName}/>\n        </label>\n        <label>\n          ID:\n          <input type=\"text\" value={this.state.id} onChange={this.handleID}/>\n        </label>\n        <label>\n          Points:\n          <input type=\"text\" value={this.state.points} onChange={this.handlePoints}/>\n        </label>\n        <input type=\"submit\" value=\"Add\" />\n      </form>\n    );\n  }\n}\nfunction Table({ columns, data }) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n  })\n\n  // Render the UI for your table\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nexport const Students = ({ students }) => {\n  const columns = React.useMemo(\n    () => [{\n      columns: [{\n        Header: 'Name',\n        accessor: 'name',\n      }, {\n        Header: 'ID',\n        accessor: 'id',\n      }, {\n        Header: 'Points',\n        accessor: 'points',\n      }, ],\n    }, []]\n  )\n  /*\n  return (\n    <List>\n      Name:\n      {students.map(student => {\n        return (\n          <List.Item key = {student.name}>\n            <Header>\n              {student.name}\n              {student.id}\n              {student.points}\n            </Header>\n          </List.Item>\n        \n        )\n      })}\n    </List>\n  );\n  */\n  return (\n    <div>\n      <Table columns = {columns} data = {students} />\n    </div>\n  );\n\n}\n\nfunction GetLines(props) {\n  return (\n    <div className=\"GetLines\">  \n      <Students students={props.students} />\n    </div>\n  );\n}\n\nfunction UpdateStudent(props) {\n  return (\n    <div>\n\n    </div>\n  );\n}\n\nfunction DeleteStudent(props) {\n  return (\n    <div>\n      \n    </div>\n  );\n}\n\nfunction App() {\n  // used to have and array of students\n  const [students, setStudents] = useState([]);\n  useEffect(() => {\n    fetch(\"/data\").then(response =>\n      response.json().then(data => {\n        setStudents(data.rows);\n      })\n    );\n  }, []); \n\n  // console.log(students);\n  \n  return (\n    <div className='table'>\n      <CreateData onNewStudent={student => setStudents(currentStudents => [...currentStudents, student])}/>\n      <GetLines students={students}/>\n      <UpdateStudent students={students}/>\n      <DeleteStudent students={students}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}