{"ast":null,"code":"var _jsxFileName = \"E:\\\\UMBC Stuff\\\\CMSC 447\\\\homework\\\\react-flask-app\\\\src\\\\components\\\\Students.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { useTable, useRowSelect } from 'react-table';\nimport { FormButton } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass DeleteStudent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    if (this.props.selected.length === 0) {\n      alert('Select rows to be deleted');\n    } else {\n      this.props.selected.forEach(row => {\n        var removeStudent = {\n          id: Number(row.id)\n        };\n        const response = fetch('/remove', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(removeStudent)\n        });\n        this.props.onRemoveStudent(row);\n      });\n    }\n\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Remove Selected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass UpdateParams extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      id: '',\n      points: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleID = this.handleID.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handlePoints = this.handlePoints.bind(this);\n  }\n\n  handleName(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n\n  handleID(event) {\n    this.setState({\n      id: event.target.value\n    });\n  }\n\n  handlePoints(event) {\n    this.setState({\n      points: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    if (this.state.name === '' && this.state.id === '' && this.state.props === '') {\n      alert('chose an atribute to be updated');\n    } else {\n      this.props.selected.forEach(row => {\n        var newStudent = {\n          name: this.state.name,\n          id: Number(this.state.id),\n          points: Number(this.state.points)\n        };\n\n        if (this.state.name === '') {\n          newStudent.name = row.name;\n        }\n\n        if (this.state.id === '') {\n          newStudent.id = row.id;\n        }\n\n        if (this.state.props === '') {\n          newStudent.props = row.props;\n        }\n\n        var updateStudent = {\n          newname: newStudent.name,\n          newid: newStudent.id,\n          newpoints: newStudent.points,\n          oldid: row.id\n        };\n        const response = fetch('/update', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updateStudent)\n        });\n        this.props.onRemoveStudent(row);\n        this.props.onNewStudent();\n        this.props.onNewStudent(newStudent);\n        this.setState({\n          name: ''\n        });\n        this.setState({\n          id: ''\n        });\n        this.setState({\n          points: ''\n        });\n        this.props.onChange();\n      });\n    }\n\n    event.preventDefault();\n  }\n\n  render() {\n    if (this.props.showChange) {\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"New Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.name,\n            onChange: this.handleName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"New ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.id,\n            onChange: this.handleID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"New Points:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.points,\n            onChange: this.handlePoints\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this);\n    } else {\n      return null;\n    }\n  }\n\n}\n\nclass UpdateStudent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showChange: false\n    };\n    this.handleUpdate = this.handleUpdate.bind(this);\n  }\n\n  handleUpdate(event) {\n    if (this.props.selected.length !== 1) {\n      alert('One row must be selected');\n    } else {\n      this.setState(prevState => ({\n        showChange: true\n      }));\n    }\n\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleUpdate,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Update Selected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UpdateParams, {\n        selected: this.props.selected,\n        showChange: this.state.showChange,\n        onRemoveStudent: this.props.onRemoveStudent,\n        onNewStudent: this.props.onNewStudent,\n        onUpdated: this.state.showChange = false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst IndeterminateCheckbox = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s((_ref, ref) => {\n  _s();\n\n  let {\n    indeterminate,\n    ...rest\n  } = _ref;\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n  React.useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      ref: resolvedRef,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}, \"ouw4KVvDKeit07oEcYWUcp3TdOA=\")), \"ouw4KVvDKeit07oEcYWUcp3TdOA=\");\n\n_c2 = IndeterminateCheckbox;\n\nfunction Students(props) {\n  _s2();\n\n  const data = React.useMemo(() => props.students);\n  const columns = React.useMemo(() => [{\n    Header: 'Name',\n    accessor: 'name'\n  }, {\n    Header: 'ID',\n    accessor: 'id'\n  }, {\n    Header: 'Points',\n    accessor: 'points'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows,\n    state: {\n      selectedRowIds\n    }\n  } = useTable({\n    columns,\n    data\n  }, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [{\n      id: 'selection',\n      Header: _ref2 => {\n        let {\n          getToggleAllRowsSelectedProps\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...getToggleAllRowsSelectedProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 17\n        }, this);\n      },\n      Cell: _ref3 => {\n        let {\n          row\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...row.getToggleRowSelectedProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }, this);\n      }\n    }, ...columns]);\n  }); // renders ui for table\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 12\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeleteStudent, {\n      selected: selectedFlatRows.map(d => d.original),\n      onRemoveStudent: props.onRemoveStudent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UpdateStudent, {\n      selected: selectedFlatRows.map(d => d.original),\n      onRemoveStudent: props.onRemoveStudent,\n      onNewStudent: props.onNewStudent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(Students, \"QKCGYqoMyCbSvLfjq+kiZewNYj0=\", false, function () {\n  return [useTable];\n});\n\n_c3 = Students;\nexport default Students;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"IndeterminateCheckbox$React.forwardRef\");\n$RefreshReg$(_c2, \"IndeterminateCheckbox\");\n$RefreshReg$(_c3, \"Students\");","map":{"version":3,"sources":["E:/UMBC Stuff/CMSC 447/homework/react-flask-app/src/components/Students.js"],"names":["React","useTable","useRowSelect","FormButton","DeleteStudent","Component","constructor","props","handleSubmit","bind","event","selected","length","alert","forEach","row","removeStudent","id","Number","response","fetch","method","headers","body","JSON","stringify","onRemoveStudent","preventDefault","render","UpdateParams","state","name","points","handleID","handlePoints","handleName","setState","target","value","newStudent","updateStudent","newname","newid","newpoints","oldid","onNewStudent","onChange","showChange","UpdateStudent","handleUpdate","prevState","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","Students","data","useMemo","students","columns","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","selectedRowIds","hooks","visibleColumns","push","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","map","headerGroup","getHeaderGroupProps","column","getHeaderProps","getRowProps","cells","cell","getCellProps","d","original"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useTable, useRowSelect } from 'react-table';\r\nimport { FormButton } from 'semantic-ui-react';\r\n\r\n\r\nclass DeleteStudent extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    if(this.props.selected.length === 0) {\r\n        alert('Select rows to be deleted');\r\n    } else {\r\n        this.props.selected.forEach(row => {\r\n            var removeStudent = {\r\n                id: Number(row.id)\r\n            }\r\n            const response = fetch('/remove', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(removeStudent)\r\n            });\r\n            this.props.onRemoveStudent(row);\r\n        });\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input type=\"submit\" value=\"Remove Selected\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass UpdateParams extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {name: '', id: '', points: ''}\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleID = this.handleID.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handlePoints = this.handlePoints.bind(this);\r\n  }\r\n\r\n  handleName(event) {\r\n    this.setState({name: event.target.value});\r\n  }\r\n\r\n  handleID(event) {\r\n    this.setState({id: event.target.value});\r\n  }\r\n  \r\n  handlePoints(event) {\r\n    this.setState({points: event.target.value});\r\n  }\r\n\r\n    handleSubmit(event) {\r\n        if(this.state.name === '' && this.state.id === '' && this.state.props === ''){\r\n            alert('chose an atribute to be updated')\r\n        } else {\r\n          this.props.selected.forEach(row => {\r\n            var newStudent = {\r\n              name: this.state.name,\r\n              id: Number(this.state.id),\r\n              points: Number(this.state.points)\r\n            }\r\n            if (this.state.name === ''){\r\n                newStudent.name = row.name\r\n            }\r\n            if (this.state.id === ''){\r\n                newStudent.id = row.id\r\n            }\r\n            if (this.state.props === ''){\r\n                newStudent.props = row.props\r\n            }\r\n            var updateStudent = {\r\n                newname: newStudent.name,\r\n                newid: newStudent.id,\r\n                newpoints: newStudent.points,\r\n                oldid: row.id\r\n            }\r\n            const response = fetch('/update', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify(updateStudent)\r\n            });\r\n            this.props.onRemoveStudent(row);\r\n            this.props.onNewStudent();\r\n            this.props.onNewStudent(newStudent)\r\n            this.setState({name: ''});\r\n            this.setState({id: ''});\r\n            this.setState({points: ''});\r\n            this.props.onChange();\r\n          });\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        if(this.props.showChange){\r\n            return (\r\n                <form onSubmit={this.handleSubmit}>\r\n                  <label>\r\n                    New Name:\r\n                    <input type=\"text\" value={this.state.name} onChange={this.handleName}/>\r\n                  </label>\r\n                  <label>\r\n                    New ID:\r\n                    <input type=\"text\" value={this.state.id} onChange={this.handleID}/>\r\n                  </label>\r\n                  <label>\r\n                    New Points:\r\n                    <input type=\"text\" value={this.state.points} onChange={this.handlePoints}/>\r\n                  </label>\r\n                  <input type=\"submit\" value=\"update\" />\r\n                </form>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nclass UpdateStudent extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {showChange: false}\r\n    this.handleUpdate = this.handleUpdate.bind(this);\r\n  }\r\n\r\n  handleUpdate(event) {\r\n    if(this.props.selected.length !== 1){\r\n        alert('One row must be selected')\r\n    }  else {\r\n        this.setState(prevState => ({showChange: true}))\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  render(){\r\n      return (\r\n      <div>\r\n        <form onSubmit={this.handleUpdate}>\r\n          <input type=\"submit\" value=\"Update Selected\" />\r\n        </form>\r\n        <UpdateParams \r\n          selected = {this.props.selected}\r\n          showChange = {this.state.showChange}\r\n          onRemoveStudent= {this.props.onRemoveStudent}\r\n          onNewStudent= {this.props.onNewStudent}\r\n          onUpdated={this.state.showChange = false}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n    ({ indeterminate, ...rest }, ref) => {\r\n        const defaultRef = React.useRef()\r\n        const resolvedRef = ref || defaultRef\r\n    \r\n        React.useEffect(() => {\r\n          resolvedRef.current.indeterminate = indeterminate\r\n        }, [resolvedRef, indeterminate])\r\n    \r\n        return (\r\n          <>\r\n            <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n          </>\r\n        )\r\n      }\r\n)\r\n\r\nfunction Students(props){\r\n  const data = React.useMemo(() => props.students);\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'name',\r\n      }, {\r\n        Header: 'ID',\r\n        accessor: 'id',\r\n      }, {\r\n        Header: 'Points',\r\n        accessor: 'points',\r\n      },\r\n    ], []\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    selectedFlatRows,\r\n    state: { selectedRowIds },\r\n  } = useTable({columns, data},\r\n    useRowSelect,\r\n    hooks => {\r\n        hooks.visibleColumns.push(columns => [{\r\n            id: 'selection',\r\n            Header: ({ getToggleAllRowsSelectedProps }) => (\r\n                <div>\r\n                    <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n                </div>\r\n            ),\r\n            Cell: ({ row }) => (\r\n                <div>\r\n                    <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n                </div>\r\n            ),\r\n        },...columns,])\r\n    });\r\n\r\n  // renders ui for table\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n       <thead> \r\n         {headerGroups.map(headerGroup => (\r\n           <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps()}>\r\n                {column.render('Header')}\r\n              </th>\r\n            ))}\r\n           </tr>\r\n         ))}\r\n       </thead>\r\n       <tbody {...getTableBodyProps()}>\r\n         {rows.map(row => {\r\n           prepareRow(row)\r\n           return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map(cell => {\r\n                return (\r\n                  <td {...cell.getCellProps()}>\r\n                    {cell.render('Cell')}\r\n                  </td>\r\n                )\r\n              })}\r\n            </tr>\r\n           )\r\n         })}\r\n       </tbody>\r\n      </table>\r\n      <DeleteStudent \r\n        selected = {selectedFlatRows.map(d => d.original)} \r\n        onRemoveStudent= {props.onRemoveStudent}\r\n      />\r\n      <UpdateStudent\r\n        selected = {selectedFlatRows.map(d => d.original)}\r\n        onRemoveStudent= {props.onRemoveStudent}\r\n        onNewStudent= {props.onNewStudent}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Students;"]},"metadata":{},"sourceType":"module"}